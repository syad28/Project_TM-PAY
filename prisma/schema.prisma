generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum JenisTransaksi {
  setor
  tarik
  topup
  transfer
}

model User {
  id            Int     @id @default(autoincrement())
  nama          String  @db.VarChar(100)
  email         String  @unique @db.VarChar(255)
  no_hp         String? @unique @db.VarChar(20)
  password      String  @db.VarChar(255)
  saldo         Decimal @default(0) @db.Decimal(15, 2)
  pin_transaksi String? @db.VarChar(255)
  status_akun   String  @default("active")
  role          String  @default("user") @db.VarChar(50)

  //securty nya
  email_verified        Boolean   @default(false)
  email_verified_at     DateTime?
  phone_verified        Boolean   @default(false)
  phone_verified_at     DateTime?
  last_login_at         DateTime?
  password_changed_at   DateTime? @default(now())
  failed_login_attempts Int       @default(0)
  locked_until          DateTime?

  //waktu
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  //profil nya
  avatar_url    String?   @db.Text
  date_of_birth DateTime?
  gender        String?   @db.VarChar(10)
  address       String?   @db.Text
  ktp_number    String?   @unique @db.VarChar(20)
  ktp_verified  Boolean   @default(false)

  // Relations
  tabungan         Tabungan[]
  transaksi        Transaksi[]    @relation("UserTransaksi")
  transaksi_tujuan Transaksi[]    @relation("UserTujuanTransaksi")
  kritikSaran      KritikSaran[]
  user_sessions    UserSession[]
  user_activities  UserActivity[]

  @@index([email])
  @@index([no_hp])
  @@index([status_akun])
  @@index([createdAt])
  @@map("users")
}

//save session user
model UserSession {
  id            String   @id @default(cuid())
  user_id       Int
  token         String   @db.Text
  refresh_token String?  @db.Text
  device_info   String?  @db.Text
  ip_address    String?  @db.VarChar(45)
  user_agent    String?  @db.Text
  expires_at    DateTime
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([expires_at])
  @@map("user_sessions")
}

//log data user
model UserActivity {
  id          Int      @id @default(autoincrement())
  user_id     Int
  action      String   @db.VarChar(100) // login, logout, password_change, etc.
  description String?  @db.Text
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  metadata    Json? // Additional data
  created_at  DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([action])
  @@index([created_at])
  @@map("user_activities")
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  nama     String
  role     String @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  logAktivitas LogAktivitas[]
}

model Tabungan {
  id        Int       @id @default(autoincrement())
  nama      String
  target    Float
  progres   Float     @default(0)
  deadline  DateTime?
  status    String    @default("active")
  createdAt DateTime  @default(now())

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  transaksi Transaksi[]

  // Self-relation
  tabungan   Tabungan?  @relation("TabunganParent", fields: [tabunganId], references: [id])
  tabunganId Int?
  children   Tabungan[] @relation("TabunganParent")
}

model Transaksi {
  id      Int            @id @default(autoincrement())
  jenis   JenisTransaksi
  jumlah  Float
  metode  String
  promo   String?
  tanggal DateTime       @default(now())

  // Relations sesuai ERD diagram
  user   User @relation("UserTransaksi", fields: [userId], references: [id])
  userId Int

  tabungan   Tabungan? @relation(fields: [tabunganId], references: [id])
  tabunganId Int?

  userTujuan   User? @relation("UserTujuanTransaksi", fields: [userTujuanId], references: [id])
  userTujuanId Int?
}

model KritikSaran {
  id      Int      @id @default(autoincrement())
  pesan   String   @db.Text
  tanggal DateTime @default(now())

  // Relations
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model LogAktivitas {
  id        Int      @id @default(autoincrement())
  aktivitas String   @db.Text
  tanggal   DateTime @default(now())

  // Relations
  admin   Admin @relation(fields: [adminId], references: [id])
  adminId Int
}

